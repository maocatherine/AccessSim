buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.5"
    id "com.jfrog.artifactory" version "4.15.2"
    id "maven-publish"
	id 'signing'
}

configurations {
    testImplementation.extendsFrom compileOnly
}

dependencies {
    annotationProcessor libraries.lombok
    
    compileOnly libraries.lombok
    
    implementation libraries.actitopp,
            libraries.opencsv,
            libraries.commons_compress,
            libraries.snakeyaml,
            libraries.rhino,
            libraries.rhino_engine,
            libraries.log4j,
            libraries.slf4j,
            libraries.gson
    
    testAnnotationProcessor libraries.lombok
    
    testCompileOnly libraries.lombok
    
    testImplementation libraries.junit_jupiter,
                libraries.junit_migrationsupport,
                libraries.assertj,
                libraries.hamcrest_all,
                libraries.hamcrest_optional,
                libraries.mockito_core,
                libraries.mockito_junit_jupiter,
                libraries.equalsverifier
        
    testRuntime libraries.junit_vintage
}

tasks.withType(JavaCompile) { 
    options.compilerArgs << "-Xlint:all" 
}

eclipse.classpath {
    downloadSources=true
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
        java.srcDirs = ['src/integration-test/java']
        resources.srcDirs = ['src/integration-test/resources']
    }
}

test {
    useJUnitPlatform()
    enableAssertions = "true"
    maxHeapSize = "2G"
    testLogging.showStandardStreams = true
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        release(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            version project.version
        }
        snapshot(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            def buildNumber = project.hasProperty('build_number') ? project.property('build_number') : '123'
            def snapshotVersion = project.version.replaceAll("\\.${buildNumber}", '') + '-SNAPSHOT'
            version snapshotVersion
        }
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			groupId project.group
			artifactId project.name
			version project.version
			pom {
				name = 'mobiTopp'
				description = 'mobiTopp (http://mobitopp.ifv.kit.edu/) is an agent-based travel demand model developed at the Institute for transport studies at the Karlsruhe Institute of Technology (http://www.ifv.kit.edu/english/index.php). Publications about mobiTopp can be found on the project site (http://mobitopp.ifv.kit.edu/28.php).'
				url = 'https://github.com/kit-ifv/mobitopp'
				licenses {
					license {
						name = 'GNU GENERAL PUBLIC LICENSE, Version 3'
						url = 'https://www.gnu.org/licenses/gpl-3.0-standalone.html'
					}
				}
				developers {
					developer {
						id = 'lb'
						name = 'Lars Briem'
						email = 'lars.briem@kit.edu'
					}
					developer {
						id = 'jk'
						name = 'Jelle Kuebler'
						email = 'jelle.kuebler@kit.edu'
					}
				}
				scm {
					connection = 'scm:git:git:https://github.com/kit-ifv/mobitopp.git'
					developerConnection = 'scm:git:ssh:git@github.com:kit-ifv/mobitopp.git'
					url = 'https://github.com/kit-ifv/mobitopp'
				}
			}
		
		}

    }
    repositories {
        maven {
			name = 'Internal'
            credentials {
                username getPropertyOrDefault('repositoryUsername')
                password getPropertyOrDefault('repositoryPassword')
            }
            def repositoryUrl = getPropertyOrDefault('repositoryUrl')
            def releasesRepoUrl = "${repositoryUrl}/repository/maven-releases"
            def snapshotsRepoUrl = "${repositoryUrl}/repository/maven-snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
		maven {
			name = 'External'
			credentials {
				username getPropertyOrDefault('user_oss')
				password getPropertyOrDefault('pw_oss')
			}

			def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
			def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
		}

    }
}

signing {
	sign publishing.publications.mavenJava
}


def getPropertyOrDefault(key) {
    return project.hasProperty(key) ? project.property(key) : key
}