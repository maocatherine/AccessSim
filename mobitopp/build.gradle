buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.4"
    id "com.jfrog.artifactory" version "4.8.1"
    id "maven-publish"
}

configurations {
    testImplementation.extendsFrom compileOnly
}

dependencies {
    annotationProcessor libraries.lombok
    
    compileOnly libraries.lombok
    
    implementation libraries.actitopp,
            libraries.opencsv,
            libraries.commons_compress,
            libraries.snakeyaml
    
    testAnnotationProcessor libraries.lombok
    
    testCompileOnly libraries.lombok
    
    testImplementation libraries.junit_jupiter,
                libraries.junit_migrationsupport,
                libraries.assertj,
                libraries.hamcrest_all,
                libraries.hamcrest_optional,
                libraries.mockito_core,
                libraries.mockito_junit_jupiter,
                libraries.equalsverifier
        
    testRuntime libraries.junit_vintage
}

tasks.withType(JavaCompile) { 
    options.compilerArgs << "-Xlint:all" 
}

eclipse.classpath {
    downloadSources=true
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
        java.srcDirs = ['src/integration-test/java']
        resources.srcDirs = ['src/integration-test/resources']
    }
}

test {
    useJUnitPlatform()
    enableAssertions = "true"
    maxHeapSize = "2G"
    testLogging.showStandardStreams = true
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            version project.version
        }
    }
    repositories {
        maven {
            credentials {
                username getPropertyOrDefault('repositoryUsername')
                password getPropertyOrDefault('repositoryPassword')
            }
            def repositoryUrl = getPropertyOrDefault('repositoryUrl')
            def releasesRepoUrl = "${repositoryUrl}/repository/maven-releases/"
            def snapshotsRepoUrl = "${repositoryUrl}/repository/maven-snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

artifactory {
    contextUrl = 'http://oss.jfrog.org'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = project.hasProperty('user') ? project.property('user') : 'user'
            password = project.hasProperty('key') ? project.property('key') : 'key'
        }
        defaults {
            publications('mavenJava')
            publishArtifacts = true
            publishPom = true
        }
    }
    resolve {
        repoKey = 'jcenter'
    }
    def buildnumber = project.hasProperty('build.number') ? project.property('build.number') : '' 
    clientConfig.info.setBuildNumber(buildnumber)
}

bintray {
    user = project.hasProperty('user') ? project.property('user') : 'user'
    key = project.hasProperty('key')? project.property('key') : 'key'
    publications = ['mavenPublication']
    pkg {
        repo = 'ifv-mobitopp'
        name = project.name
        userOrg = 'ifv-mobitopp'
        licenses = ['GPL-3.0']
        vcsUrl = 'https://github.com/ifv-mobitopp/mobitopp'
        version {
          name = project.version
          description = project.version
          released = new Date()
        }
    }
}

uploadArchives {
    repositories {
        def repositoryUrl = getPropertyOrDefault('repositoryUrl')
        def repositoryUsername = getPropertyOrDefault('repositoryUsername')
        def repositoryPassword = getPropertyOrDefault('repositoryPassword')
        mavenDeployer {
            repository(url: "${repositoryUrl}/repository/maven-releases/") {
                authentication(userName: repositoryUsername, password: repositoryPassword)
            }
            snapshotRepository(url: "${repositoryUrl}/repository/maven-snapshots") {
                authentication(userName: repositoryUsername, password: repositoryPassword)
            }
        }
    }
}

def getPropertyOrDefault(key) {
    return project.hasProperty(key) ? project.property(key) : key
}