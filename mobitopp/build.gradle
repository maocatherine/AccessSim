buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}

plugins {
  id "com.jfrog.bintray" version "1.8.4"
  id "com.jfrog.artifactory" version "4.8.1"
  id "maven-publish"
}

dependencies {
    compile 'edu.kit.ifv.mobitopp:actitopp:0.1',
            'net.sf.opencsv:opencsv:2.3',
            'org.apache.commons:commons-compress:1.12',
            'org.yaml:snakeyaml:1.18'
    
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.2',
                'org.junit.jupiter:junit-jupiter-params:5.3.2',
                'org.junit.jupiter:junit-jupiter-migrationsupport:5.3.2',
                'org.hamcrest:hamcrest-all:1.3',
                'com.github.npathai:hamcrest-optional:1.0',
                'org.mockito:mockito-core:2.24.0',
                'nl.jqno.equalsverifier:equalsverifier:2.2.2'
        
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
}

tasks.withType(JavaCompile) { 
    options.compilerArgs << "-Xlint:all" 
}

eclipse.classpath {
    downloadSources=true
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
        java.srcDirs = ['src/integration-test/java']
        resources.srcDirs = ['src/integration-test/resources']
    }
}

test {
    useJUnitPlatform()
    enableAssertions = "true"
    maxHeapSize = "2G"
    testLogging.showStandardStreams = true
}

jar {
    archiveName = 'mobitopp.jar'
    manifest.attributes("Class-Path": configurations.runtime.collect { "lib/$it.name" }.join(' '))
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jar.doLast {
    File distDir = new File(buildDir, 'dist')
    File oldDistribution = new File("dist")
    createDistDir(oldDistribution)
}

task copyDependencies(type: Copy, dependsOn: jar) {
    from configurations.runtime
    into "dist/lib"
}

task copyMobitopp(type: Copy, dependsOn: jar) {
    from jar
    into "dist"
}

distZip.dependsOn copyDependencies
distZip.dependsOn copyMobitopp

void createDistDir(File parent) {
    File libDir = new File(parent, 'lib')
    libDir.mkdirs()
}

distributions {
    main {
        contents {
            baseName = 'mobitopp'
            into('dist') {
                from jar
                into('lib') {
                    from(project.configurations.runtime)
                }
            }
            into('bin') {
                from('bin.run') {
                    fileMode 0755
                    include 'run*.sh'
                }
            }
            into('') {
                from { "$buildDir/dist" }
            }
        }
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            version project.version
        }
    }
}

artifactory {
    contextUrl = 'http://oss.jfrog.org'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = project.hasProperty('user') ? project.property('user') : 'user'
            password = project.hasProperty('key') ? project.property('key') : 'key'
        }
        defaults {
            publications('mavenPublication')
            publishArtifacts = true
            publishPom = true
        }
    }
    resolve {
        repoKey = 'jcenter'
    }
    def buildnumber = project.hasProperty('build.number') ? project.property('build.number') : '' 
    clientConfig.info.setBuildNumber(buildnumber)
}

bintray {
    user = project.hasProperty('user') ? project.property('user') : 'user'
    key = project.hasProperty('key')? project.property('key') : 'key'
    publications = ['mavenPublication']
    pkg {
        repo = 'ifv-mobitopp'
        name = project.name
        userOrg = 'ifv-mobitopp'
        licenses = ['GPL-3.0']
        vcsUrl = 'https://github.com/ifv-mobitopp/mobitopp'
        version {
          name = project.version
          description = project.version
          released = new Date()
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
           repository(url: project.ext["mobitopp.repository.url"])
        }
    }
}