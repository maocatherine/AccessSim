
//apply plugin: 'java'
//apply plugin: 'eclipse'
//apply plugin: 'maven'
//apply plugin: 'jacoco'

//group = 'edu.kit.ifv.mobitopp'
//version = 0.1
//wrapper.gradleVersion = '7.4'

//sourceCompatibility = 1.12
//targetCompatibility = 1.12

repositories {
    jcenter()
   mavenCentral()
  maven { url "https://repo.osgeo.org/repository/release" }
  maven {
        url("https://repo.matsim.org/repository/matsim")
        content {
            includeGroup("org.matsim")
            includeGroup("org.matsim.contrib")
        }
    }
}

//configurations.all {
//    exclude group: 'xerces', module: 'xerces'
//    exclude group: 'kml', module: 'kml'
//    exclude group: 'javax.media', module: 'jai_core'
//}

dependencies {
    implementation 'org.junit.jupiter:junit-jupiter:5.7.0',
            'org.matsim:matsim:13.0',
            'org.matsim.contrib:accessibility:13.0',
            'org.matsim.contrib:emissions:13.0',
            'org.slf4j:slf4j-api:1.7.25',
            // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
            'org.apache.logging.log4j:log4j-core:2.17.1',
            libraries.opencsv,
            'org.javatuples:javatuples:1.2',
            project(':mobitopp'),
            project(':actitopp')

// https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation 'org.mockito:mockito-core:3.12.4',
                        'org.hamcrest:hamcrest-all:1.3'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'
    compileOnly 'org.projectlombok:lombok:1.18.26'

//    compile 'org.jvnet.ogc:kml-v_2_2_0:2.2.0'
//    testCompile 'junit:junit:4.12',
//            'org.hamcrest:hamcrest-all:1.3',
//            'org.mockito:mockito-inline:2.+'

}

eclipse.classpath {
    downloadSources=true
}

task runPopulationSynthesisST(type: JavaExec) {
    args = ['config/short term/population-synthesis-ipf.yaml']
    main = "edu.kit.ifv.mobitopp.populationsynthesis.PopulationSynthesisMatsim"
}

task runPopulationSynthesisLT(type: JavaExec) {
    args = ['config/long term/population-synthesis-ipf-lt.yaml']
    main = "edu.kit.ifv.mobitopp.populationsynthesis.PopulationSynthesisMatsim"
}

task runPopulationSynthesisEM(type: JavaExec) {
    args = ['config/emission/population-synthesis-ipf.yaml']
    main = "edu.kit.ifv.mobitopp.populationsynthesis.PopulationSynthesisMatsim"
}

task runSimulationMatsimST(type: JavaExec) {
    args = ['config/short term/simulation-matsim.yaml']
    main = "edu.kit.ifv.mobitopp.simulation.MobitoppMatsimCoupling"
}

task runSimulationMatsimLT(type: JavaExec) {
    args = ['config/long term/simulation-matsim-lt.yaml']
    main = "edu.kit.ifv.mobitopp.simulation.MobitoppMatsimCoupling"
}

task runSimulationMatsimEM(type: JavaExec) {
    args = ['config/emission/simulation-matsim.yaml']
    main = "edu.kit.ifv.mobitopp.simulation.MobitoppMatsimCoupling"
}

task PostUrbanSimProcess(type: JavaExec) {
    args = ['config/long term/simulation-matsim-lt.yaml']
    main = "edu.kit.ifv.mobitopp.populationsynthesis.PostUrbanSimProcess"
}

task runMobitoppOnlyST(type: JavaExec) {
    args = ['config/shortterm/simulation-mobitopp-only.yaml']
    main = "edu.kit.ifv.mobitopp.simulation.Mobitopp"
}

tasks.withType(JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    dependsOn check
    enableAssertions = "true"
    group = "application"
    maxHeapSize = "25G"
    jvmArgs '-Xss512M'
}
